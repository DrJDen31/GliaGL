#version 330 core

// data flows in from the C++ program
layout(location = 0) in vec4 vertexPosition_modelspace;
layout(location = 1) in vec4 vertexNormal_modelspace;
layout(location = 2) in vec4 vertexColor;

// data flows out to the fragment shader
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec4 mycolor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition_worldspace;
uniform int wireframe;
uniform float neuronSizeScale;

void main(){
  
  // apply the transformation (only use xyz, w is size data)
  gl_Position =  MVP * vec4(vertexPosition_modelspace.xyz, 1.0);
  
  // Set point size from vertex data (w component stores size)
  // Fixed screen-space sizing (doesn't scale with zoom)
  float baseSize = vertexPosition_modelspace.w * 500.0;  // Scale to reasonable screen pixels
  gl_PointSize = baseSize * neuronSizeScale;  // Apply user-adjustable scale

  // Position of the vertex, in worldspace : M * position
  Position_worldspace = (M * vec4(vertexPosition_modelspace.xyz, 1.0)).xyz;

  // Vector that goes from the vertex to the camera, in camera space.
  // In camera space, the camera is at the origin (0,0,0).
  vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace.xyz, 1.0)).xyz;
  EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

  // Normal of the the vertex, in camera space
  Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace.xyz, 0.0)).xyz;
  // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
  //        Norm        	vec3 n = normalize( Normal_cameraspace );

  // just pass the color to the fragment shader
  mycolor = vertexColor;

}


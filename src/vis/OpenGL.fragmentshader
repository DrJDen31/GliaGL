#version 330 core

// Interpolated values from the vertex shaders
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 mycolor;

// data flows out to produce the final rendering
out vec4 out_color;

// Values that stay constant for the whole mesh.
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform int wireframe;

void main() {
  
  // Check if rendering a point (neuron)
  bool is_point = (gl_PointCoord.x != 0.0 || gl_PointCoord.y != 0.0);
  
  if (is_point) {
    // Make points circular (for neuron rendering)
    vec2 coord = gl_PointCoord - vec2(0.5);
    float dist = length(coord);
    if (dist > 0.5) {
      discard;  // Outside the circle
    }
    // Add soft edge
    float alpha = 1.0 - smoothstep(0.4, 0.5, dist);
    
    // Points are emissive - no lighting, just use color directly
    // Boost brightness for visibility
    vec3 emissive_color = mycolor.rgb * 1.5;
    
    // Make bright neurons glow even more
    float brightness = (mycolor.r + mycolor.g + mycolor.b) / 3.0;
    if (brightness > 0.6) {
      emissive_color = mycolor.rgb * 2.5;
    }
    
    out_color = vec4(emissive_color, alpha);
    return;
  }

  // Light emission properties for lines/triangles
  // You probably want to put them as uniforms
  vec3 LightColor = vec3(1,1,1);
  float LightPower = 50.0f;

  // Normal of the computed fragment, in camera space
  vec3 n = normalize( Normal_cameraspace );

  // Material properties
  vec3 MaterialDiffuseColor;
  if ( (wireframe == 0) ||
       ( mycolor.x > 0.1 &&
       mycolor.y > 0.1 &&
       mycolor.z > 0.1) ) {
    MaterialDiffuseColor = 0.7 * vec3(1,1,1);
  } else {
    MaterialDiffuseColor = mycolor.xyz;
    if (mycolor.x < 0.1 &&
        mycolor.y < 0.1 &&
        mycolor.z < 0.1) {
      MaterialDiffuseColor *= 7.0;
    }
  }

  vec3 MaterialAmbientColor = vec3(0.2,0.2,0.2) * MaterialDiffuseColor;
  vec3 MaterialSpecularColor = vec3(0.1,0.1,0.1);
  if(!gl_FrontFacing ) {
    MaterialDiffuseColor = vec3(0.0,0.0,0.6);
    MaterialAmbientColor = vec3(0.3,0.3,0.3) * MaterialDiffuseColor;
    MaterialSpecularColor = vec3(0.1,0.1,0.3);
    n = -n;
  }

  // Distance to the light
  // NOTE: NOT RIGHT FOR A HEADLAMP...
  float distance = length( LightPosition_worldspace - Position_worldspace );

  // Direction of the light (from the fragment to the light)
  // vec3 l = normalize( LightDirection_cameraspace );
  // NOTE: INSTEAD MAKING A HEADLAMP
  vec3 l = normalize(vec3(1.0,0.8,2.0));

  // Cosine of the angle between the normal and the light direction,
  // clamped above 0
  //  - light is at the vertical of the triangle -> 1
  //  - light is perpendicular to the triangle -> 0
  //  - light is behind the triangle -> 0
  float cosTheta = clamp( dot( n,l ), 0,1 );

  // Eye vector (towards the camera)
  vec3 E = normalize(EyeDirection_cameraspace);
  // Direction in which the triangle reflects the light
  vec3 R = reflect(-l,n);
  // Cosine of the angle between the Eye vector and the Reflect vector,
  // clamped to 0
  //  - Looking into the reflection -> 1
  //  - Looking elsewhere -> < 1
  float cosAlpha = clamp( dot( E,R ), 0,1 );

  vec3 mycolor2 =
    // Ambient : simulates indirect lighting
    MaterialAmbientColor +
    // Diffuse : "color" of the object
    MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
    // Specular : reflective highlight, like a mirror
    MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

  // For lines (connections), also make them emissive with less complex lighting
  if (wireframe == 1) {
    // Lines are mostly emissive, just add a tiny bit of ambient
    mycolor2 = mycolor.rgb * 0.8 + MaterialAmbientColor;
  }

  out_color = vec4(mycolor2, 1.0);
}
